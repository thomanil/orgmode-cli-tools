#!/usr/bin/env ruby

def body(orgfile_path)
  `cat #{orgfile_path}`
end

def title(orgfile_path)
  `cat #{orgfile_path} | grep "#+TITLE:" `.gsub("#+TITLE:", "").strip
end

def transform_divs_into_sections(html_markup)
  require 'nokogiri'
  doc = Nokogiri::HTML(html_markup)
  doc.css("#preamble").remove
  doc.css("style").remove
  doc.css(".title").remove
  doc.css("head").remove
  doc.css("#table-of-contents").remove
  doc.css("div").each do |node|
    node.node_name = "section"
  end
  doc.css("li").each do |node|
    node['class']="fragment"
  end
  doc.css("#content").inner_html
end


def slide_layout(title, body)
  <<MARKUP
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>#{title}</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="css/theme/default.css">
    <!-- For syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">
    <script>
      // If the query includes 'print-pdf' we'll use the PDF print sheet
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    </script>
    <!--[if lt IE 9]>
        <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="reveal">
      <!-- Used to fade in a background when a specific slide state is reached -->
      <div class="state-background"></div>

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

      #{body}

      </div>

      <!-- The navigational controls UI -->
      <aside class="controls">
        <a class="left" href="#">&#x25C4;</a>
        <a class="right" href="#">&#x25BA;</a>
        <a class="up" href="#">&#x25B2;</a>
        <a class="down" href="#">&#x25BC;</a>
      </aside>
      <!-- Presentation progress bar -->
      <div class="progress"><span></span></div>
    </div>
    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.min.js"></script>
    <script>
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
          controls: true,
          progress: true,
          history: true,
          transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/linear(2d)
          // Optional libraries used to extend on reveal.js
          dependencies: [
              { src: 'lib/js/highlight.js', async: true, callback: function() { window.hljs.initHighlightingOnLoad(); } },
              { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
              { src: 'lib/js/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: 'lib/js/data-markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: 'socket.io/socket.io.js', async: true, condition: function() { return window.location.host === 'localhost:1947'; } },
              { src: 'plugin/speakernotes/client.js', async: true, condition: function() { return window.location.host === 'localhost:1947'; } },
          ]
      });
    </script>
  </body>
</html>
MARKUP
end

def convert(orgfile_path)
  title = "" # TODO derive title from filename and|or org contents
  puts `org2html #{orgfile_path}`
  htmlfile_path = orgfile_path.gsub(".org", ".html")
  body = body(htmlfile_path)
  body = transform_divs_into_sections(body)
  body = slide_layout(title, body)

  # TODO use path of this file to find dir of template dir where gem is actually located

  gem_root_path = File.expand_path(File.dirname(__FILE__))+"/.."
  `cp -r #{gem_root_path}/templates/reveal_js_template generated_slides`
  File.open("generated_slides/index.html", 'w') { |file| file.write(body) }
  `rm #{htmlfile_path}`
end

if ARGV.length != 1
  puts "Usage: org2revealjs ORG_FILE_PATH"
  exit 1
end

convert(ARGV[0])
